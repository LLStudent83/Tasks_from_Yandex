// Условия задачи:
// Нам часто нужно симулировать действия пользователей, это бывает очень трудно, поэтому мы потренируемся на змейке.
// У нас есть поле, змейка, еда в виде букв Y, A, N, D, E, X и набор движений змейки.
// Задача состоит в том, чтобы симулировать движения змейки и вывести:
// 1. Координаты головы змейки на конец симуляции;
// 2. Размер змейки в конце симуляции;

// Симуляция заканчивается, когда движения закончились. Гарантируется, что змейка пройдет весь путь не столкнувшись о себя или границы поля.

// Рост:
// Когда змейка попадает на ячейку с едой, она увеличивает свой размер на 1 ячейку.

// Например:
//  --------               --------
//  --oooY--       ===>    --oooo--
//  --------               --------
// Поле
// Поле это массив строк, которые состоят из символов:

// 'o' тело змейки
// '-' пустое пространство
// 'Y', 'A', 'N', 'D', 'E', 'X' еда для змейки
// Ограничения: - Поле всегда имеет размеры 13 (высота) на 21 (ширина) - Змейка всегда начинается с размера в 3 ячейки поля - Змейка всегда начинается с координат (0,0) (0,1) (0,2), где (0,2) - это голова змейки

// Пример поля:

// const field = [
//   "ooo------Y--AND------",
//   "-----EXY--A--N---D--E",
//   "-X-----Y--A-N---D----",
//   "------EXY----A---N---",
//   "--DE--X---------YA---",
//   "-----ND---EXY--AN--D-",
//   "----E-----X-Y----A--N",
//   "D-----E-XY---AN---D--",
//   "E--------------------",
//   "-------X---Y------A-N",
//   "----D-EX----------YA-",
//   "--N-DEX--Y-A--N-----D",
//   "E------X--Y----------",
// ]
// Движения
// Движения это строка с символами U, R, L, D для направления движения (вверх, вправо, влево, вниз) и числами отображающими количество шагов в нужном направлении. - Все цифры и символы разделены пробелами

// Пример строки с движениями: R 12 D 2 R 2 U 1 R 2

// Это означает:

// 12 шагов вправо
// 2 шага вниз
// 2 шага вправо
// 1 шаг наверх
// 2 шага вправо

const field = [
  'ooo------Y--AND------',
  '-----EXY--A--N---D--E',
  '-X-----Y--A-N---D----',
  '------EXY----A---N---',
  '--DE--X---------YA---',
  '-----ND---EXY--AN--D-',
  '----E-----X-Y----A--N',
  'D-----E-XY---AN---D--',
  'E--------------------',
  '-------X---Y------A-N',
  '----D-EX----------YA-',
  '--N-DEX--Y-A--N-----D',
  'E------X--Y----------',
];

const moves = `R 12 D 2 R 2 U 1 R 2`;

function solution(field, moves) {
  let longSnake = 3;
  let coordSnake = [0, 2];
  const movArr = moves.split(' ');

  for (let i = 0; i <= movArr.length - 1; i += 2) {
    let direction = movArr[i]; // R
    let numberOfSteps = Number(movArr[i + 1]); // 12

    if (direction === 'R') {
      for (let i = 1; i <= numberOfSteps; i++) {
        if (field[coordSnake[0]].split('')[coordSnake[1] + 1] !== '-') {
          longSnake += 1;
        }
        coordSnake[1] += 1;
      }
      //   console.log(coordSnake);
    }
    if (direction === 'L') {
      for (let i = 1; i <= numberOfSteps; i++) {
        if (field[coordSnake[0]].split('')[coordSnake[1] - 1] !== '-') {
          longSnake++;
        }
        coordSnake[1] -= 1;
      }
    }
    if (direction === 'D') {
      for (let i = 0; i <= numberOfSteps; i++) {
        if (field[coordSnake[0] + 1].split('')[coordSnake[1]] !== '-') {
          longSnake++;
        }
        coordSnake[0] += 1;
      }
    }
    if (direction === 'U') {
      for (let i = 0; i <= numberOfSteps; i++) {
        if (field[coordSnake[0] - 1].split('')[coordSnake[1]] !== '-') {
          longSnake++;
        }
        coordSnake[0] -= 1;
      }
    }
  }
console.log(`Длина змейки ${longSnake}, координаты головы змейки X=${coordSnake[1]} Y=${coordSnake[0]}`)
}

solution(field, moves);